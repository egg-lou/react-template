/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as rootIndexImport } from './routes/__root/index'
import { Route as rootAuthImport } from './routes/__root/auth'
import { Route as rootAboutImport } from './routes/__root/about'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as ProtectedDashboardImport } from './routes/_protected/dashboard'

// Create/Update Routes

const rootIndexRoute = rootIndexImport.update({
  id: '/__root/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const rootAuthRoute = rootAuthImport.update({
  id: '/__root/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const rootAboutRoute = rootAboutImport.update({
  id: '/__root/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedDashboardRoute = ProtectedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/__root/about': {
      id: '/__root/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof rootAboutImport
      parentRoute: typeof rootRoute
    }
    '/__root/auth': {
      id: '/__root/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof rootAuthImport
      parentRoute: typeof rootRoute
    }
    '/_protected/dashboard': {
      id: '/_protected/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof ProtectedDashboardImport
      parentRoute: typeof ProtectedImport
    }
    '/__root/': {
      id: '/__root/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof rootIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedDashboardRoute: typeof ProtectedDashboardRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedDashboardRoute: ProtectedDashboardRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof ProtectedRouteWithChildren
  '/about': typeof rootAboutRoute
  '/auth': typeof rootAuthRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/': typeof rootIndexRoute
}

export interface FileRoutesByTo {
  '': typeof ProtectedRouteWithChildren
  '/about': typeof rootAboutRoute
  '/auth': typeof rootAuthRoute
  '/dashboard': typeof ProtectedDashboardRoute
  '/': typeof rootIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/__root/about': typeof rootAboutRoute
  '/__root/auth': typeof rootAuthRoute
  '/_protected/dashboard': typeof ProtectedDashboardRoute
  '/__root/': typeof rootIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/about' | '/auth' | '/dashboard' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/about' | '/auth' | '/dashboard' | '/'
  id:
    | '__root__'
    | '/_protected'
    | '/__root/about'
    | '/__root/auth'
    | '/_protected/dashboard'
    | '/__root/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  rootAboutRoute: typeof rootAboutRoute
  rootAuthRoute: typeof rootAuthRoute
  rootIndexRoute: typeof rootIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  rootAboutRoute: rootAboutRoute,
  rootAuthRoute: rootAuthRoute,
  rootIndexRoute: rootIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/__root/about",
        "/__root/auth",
        "/__root/"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/dashboard"
      ]
    },
    "/__root/about": {
      "filePath": "__root/about.tsx"
    },
    "/__root/auth": {
      "filePath": "__root/auth.tsx"
    },
    "/_protected/dashboard": {
      "filePath": "_protected/dashboard.tsx",
      "parent": "/_protected"
    },
    "/__root/": {
      "filePath": "__root/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
